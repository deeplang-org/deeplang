

class QuickSort {
    public
    sig qs::Array, Int, Int -> void
    fun qs(arr, low, high) {
        if (high <= low) return;
        int i = low;
        int j = high + 1;
        int key = arr[low];
        while (true)
        {
            while (arr[++i] < key)
            {
                if (i == high){
                    break;
                }
            }
            while (arr[--j] > key)
            {
                if (j == low){
                    break;
                }
            }
            if (i >= j) break;
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
        int temp = arr[low];
        arr[low] = arr[j];
        arr[j] = temp;
        qs(arr, low, j - 1);
        qs(arr, j + 1, high);
    }
}


sig main :: void -> void
fun main() {
    let arr: Array = [3,2,1];
    let qs: QuickSort = new QuickSort();
    qs.qs(arr, 0, arr.length() - 1)
}